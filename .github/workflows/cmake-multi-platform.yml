name: CMake on multiple platforms

permissions:
  contents: read

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-linux:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
        c_compiler: [gcc]
        cpp_compiler: [g++]

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libxrandr-dev libx11-dev libxext-dev libxrender-dev libxi-dev \
          libxinerama-dev libgl1-mesa-dev libglu1-mesa-dev libxcursor-dev

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Collect executable and assets
      run: |
        mkdir -p output
        cp build/10SecondIntern output/
        cp -r build/assets output/
        ls -alh output/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-linux
        path: output/

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

  build-macos:
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
        c_compiler: [clang]
        cpp_compiler: [clang++]

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        brew update
        brew install cmake
        brew install glfw

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Collect executable and assets
      run: |
        mkdir -p output
        cp build/10SecondIntern output/
        cp -r build/assets output/
        ls -alh output/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-macos
        path: output/

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

  build-windows:
    permissions:
      contents: write       # for actions/upload-release-asset to upload release asset
    runs-on: windows-latest

    env:
      PROJECT_NAME: 10SecondIntern
      PROJECT_BUILD_PATH: "10SecondIntern\\projects\\VS2022\\build\\10SecondIntern\\bin\\x64\\Release"
      PROJECT_RELEASE_PATH: 10SecondIntern_dev_win_x64
      PROJECT_RESOURCES_PATH: resources

    steps:
    - name: Checkout this repo
      uses: actions/checkout@master
      with:
        path: ${{ env.PROJECT_NAME }}
      
    - name: Checkout raylib repo
      uses: actions/checkout@v4
      with:
        repository: raysan5/raylib
        path: raylib
        
    # NOTE: Visual Studio project build configuration already defines all required directories where project is generated:
    # $(SolutionDir)\build\$(ProjectName)\bin\$(Platform)\$(Configuration)\
    - name: Setup Release Paths
      run: |
        echo "PROJECT_RELEASE_PATH=${{ env.PROJECT_NAME }}_v${{ github.event.release.tag_name }}_win_x64" >> $GITHUB_ENV
      shell: bash
      if: github.event_name == 'release' && github.event.action == 'published'

    - name: Setup Environment
      run: | 
        mkdir ${{ env.PROJECT_RELEASE_PATH }}
        dir
      shell: cmd

    # Setup MSBuild.exe path if required
    - name: Setup MSBuild path
      uses: microsoft/setup-msbuild@v2

    - name: Build raylib Library + Product (VS2022 solution)
      run: |
        dir
        cd ${{ env.PROJECT_NAME }}/projects/VS2022
        msbuild.exe ${{ env.PROJECT_NAME }}.sln /target:${{ env.PROJECT_NAME }} /property:Configuration=Release /property:Platform=x64 /property:RaylibSrcPath="..\..\..\..\raylib\src"
        cd ../..
      shell: cmd

    - name: Collect executable dynamically and print directory
      run: |
        mkdir -p output
        dir ${{ env.PROJECT_NAME }}\projects\VS2022\
        dir ${{ env.PROJECT_NAME }}
        dir ${{ env.PROJECT_NAME }}\projects\
        for /R ${{ env.PROJECT_NAME }}\projects\VS2022\build %%G in (10SecondIntern.exe) do (
          echo Found executable in: %%~dpG
          copy "%%G" output\
        )
        cp -r build/assets output/
        dir output
      shell: cmd


    # - name: Collect executable and assets
    #   run: |
    #     mkdir -p output
    #     cp ${{ env.PROJECT_BUILD_PATH }}\${{ env.PROJECT_NAME }}.exe output/
    #     cp -r build/assets output/
    #     ls -alh output/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: output/

    - name: Upload Artifact to Release
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.PROJECT_RELEASE_PATH }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: github.event_name == 'release' && github.event.action == 'published'
